//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Stellt Member zum Abfragen und Aktualisieren von Daten in der Datenquelle ApplicationData bereit.
    /// </summary>
    public sealed partial class ApplicationDataService
        : global::LightSwitchApplication.ApplicationData
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ApplicationDataService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Ruft das Application-Objekt für diese Anwendung ab. Das Application-Objekt stellt Zugriff auf aktive Bildschirme, Methoden zum Öffnen von Bildschirmen sowie Zugriff auf den aktuellen Benutzer bereit.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Ruft den übergeordneten Datenarbeitsbereich ab. Der Datenarbeitsbereich stellt Zugriff auf alle Datenquellen in der Anwendung bereit.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_Inserting(global::LightSwitchApplication.DeliveryConfirmOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_Inserted(global::LightSwitchApplication.DeliveryConfirmOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_Updating(global::LightSwitchApplication.DeliveryConfirmOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_Updated(global::LightSwitchApplication.DeliveryConfirmOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_Deleting(global::LightSwitchApplication.DeliveryConfirmOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_Deleted(global::LightSwitchApplication.DeliveryConfirmOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_Validate(global::LightSwitchApplication.DeliveryConfirmOperation entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryConfirmOperations_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.DeliveryConfirmOperation, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_Inserting(global::LightSwitchApplication.OrderReceivedOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_Inserted(global::LightSwitchApplication.OrderReceivedOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_Updating(global::LightSwitchApplication.OrderReceivedOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_Updated(global::LightSwitchApplication.OrderReceivedOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_Deleting(global::LightSwitchApplication.OrderReceivedOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_Deleted(global::LightSwitchApplication.OrderReceivedOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_Validate(global::LightSwitchApplication.OrderReceivedOperation entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderReceivedOperations_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.OrderReceivedOperation, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_Inserting(global::LightSwitchApplication.OrderGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_Inserted(global::LightSwitchApplication.OrderGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_Updating(global::LightSwitchApplication.OrderGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_Updated(global::LightSwitchApplication.OrderGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_Deleting(global::LightSwitchApplication.OrderGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_Deleted(global::LightSwitchApplication.OrderGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_Validate(global::LightSwitchApplication.OrderGetFreightOperation entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrderGetFreightOperations_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.OrderGetFreightOperation, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_Inserting(global::LightSwitchApplication.DeliveryGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_Inserted(global::LightSwitchApplication.DeliveryGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_Updating(global::LightSwitchApplication.DeliveryGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_Updated(global::LightSwitchApplication.DeliveryGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_Deleting(global::LightSwitchApplication.DeliveryGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_Deleted(global::LightSwitchApplication.DeliveryGetFreightOperation entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_Validate(global::LightSwitchApplication.DeliveryGetFreightOperation entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DeliveryGetFreightOperations_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.DeliveryGetFreightOperation, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executing(global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executed(global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_ExecuteFailed(global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.DeliveryConfirmOperation>
                __DeliveryConfirmOperationsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.DeliveryConfirmOperation>(
                    "DeliveryConfirmOperations",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryConfirmOperations_Filter);
            private static bool __DeliveryConfirmOperations_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.DeliveryConfirmOperations_CanInsert(ref result);
                return result;
            }
            private static bool __DeliveryConfirmOperations_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.DeliveryConfirmOperations_CanUpdate(ref result);
                return result;
            }
            private static bool __DeliveryConfirmOperations_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.DeliveryConfirmOperations_CanDelete(ref result);
                return result;
            }
            private static bool __DeliveryConfirmOperations_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.DeliveryConfirmOperations_CanRead(ref result);
                return result;
            }
            private static void __DeliveryConfirmOperations_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryConfirmOperation e)
            {
                d.DeliveryConfirmOperations_Inserting(e);
            }
            private static void __DeliveryConfirmOperations_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryConfirmOperation e)
            {
                d.DeliveryConfirmOperations_Inserted(e);
            }
            private static void __DeliveryConfirmOperations_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryConfirmOperation e)
            {
                d.DeliveryConfirmOperations_Updating(e);
            }
            private static void __DeliveryConfirmOperations_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryConfirmOperation e)
            {
                d.DeliveryConfirmOperations_Updated(e);
            }
            private static void __DeliveryConfirmOperations_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryConfirmOperation e)
            {
                d.DeliveryConfirmOperations_Deleting(e);
            }
            private static void __DeliveryConfirmOperations_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryConfirmOperation e)
            {
                d.DeliveryConfirmOperations_Deleted(e);
            }
            private static void __DeliveryConfirmOperations_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryConfirmOperation e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.DeliveryConfirmOperations_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.DeliveryConfirmOperation, bool>> __DeliveryConfirmOperations_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.DeliveryConfirmOperation, bool>> filter = null;
                d.DeliveryConfirmOperations_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.OrderReceivedOperation>
                __OrderReceivedOperationsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.OrderReceivedOperation>(
                    "OrderReceivedOperations",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderReceivedOperations_Filter);
            private static bool __OrderReceivedOperations_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.OrderReceivedOperations_CanInsert(ref result);
                return result;
            }
            private static bool __OrderReceivedOperations_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.OrderReceivedOperations_CanUpdate(ref result);
                return result;
            }
            private static bool __OrderReceivedOperations_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.OrderReceivedOperations_CanDelete(ref result);
                return result;
            }
            private static bool __OrderReceivedOperations_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.OrderReceivedOperations_CanRead(ref result);
                return result;
            }
            private static void __OrderReceivedOperations_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderReceivedOperation e)
            {
                d.OrderReceivedOperations_Inserting(e);
            }
            private static void __OrderReceivedOperations_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderReceivedOperation e)
            {
                d.OrderReceivedOperations_Inserted(e);
            }
            private static void __OrderReceivedOperations_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderReceivedOperation e)
            {
                d.OrderReceivedOperations_Updating(e);
            }
            private static void __OrderReceivedOperations_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderReceivedOperation e)
            {
                d.OrderReceivedOperations_Updated(e);
            }
            private static void __OrderReceivedOperations_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderReceivedOperation e)
            {
                d.OrderReceivedOperations_Deleting(e);
            }
            private static void __OrderReceivedOperations_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderReceivedOperation e)
            {
                d.OrderReceivedOperations_Deleted(e);
            }
            private static void __OrderReceivedOperations_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderReceivedOperation e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.OrderReceivedOperations_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.OrderReceivedOperation, bool>> __OrderReceivedOperations_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.OrderReceivedOperation, bool>> filter = null;
                d.OrderReceivedOperations_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.OrderGetFreightOperation>
                __OrderGetFreightOperationsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.OrderGetFreightOperation>(
                    "OrderGetFreightOperations",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OrderGetFreightOperations_Filter);
            private static bool __OrderGetFreightOperations_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.OrderGetFreightOperations_CanInsert(ref result);
                return result;
            }
            private static bool __OrderGetFreightOperations_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.OrderGetFreightOperations_CanUpdate(ref result);
                return result;
            }
            private static bool __OrderGetFreightOperations_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.OrderGetFreightOperations_CanDelete(ref result);
                return result;
            }
            private static bool __OrderGetFreightOperations_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.OrderGetFreightOperations_CanRead(ref result);
                return result;
            }
            private static void __OrderGetFreightOperations_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderGetFreightOperation e)
            {
                d.OrderGetFreightOperations_Inserting(e);
            }
            private static void __OrderGetFreightOperations_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderGetFreightOperation e)
            {
                d.OrderGetFreightOperations_Inserted(e);
            }
            private static void __OrderGetFreightOperations_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderGetFreightOperation e)
            {
                d.OrderGetFreightOperations_Updating(e);
            }
            private static void __OrderGetFreightOperations_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderGetFreightOperation e)
            {
                d.OrderGetFreightOperations_Updated(e);
            }
            private static void __OrderGetFreightOperations_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderGetFreightOperation e)
            {
                d.OrderGetFreightOperations_Deleting(e);
            }
            private static void __OrderGetFreightOperations_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderGetFreightOperation e)
            {
                d.OrderGetFreightOperations_Deleted(e);
            }
            private static void __OrderGetFreightOperations_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.OrderGetFreightOperation e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.OrderGetFreightOperations_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.OrderGetFreightOperation, bool>> __OrderGetFreightOperations_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.OrderGetFreightOperation, bool>> filter = null;
                d.OrderGetFreightOperations_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.DeliveryGetFreightOperation>
                __DeliveryGetFreightOperationsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.DeliveryGetFreightOperation>(
                    "DeliveryGetFreightOperations",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__DeliveryGetFreightOperations_Filter);
            private static bool __DeliveryGetFreightOperations_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.DeliveryGetFreightOperations_CanInsert(ref result);
                return result;
            }
            private static bool __DeliveryGetFreightOperations_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.DeliveryGetFreightOperations_CanUpdate(ref result);
                return result;
            }
            private static bool __DeliveryGetFreightOperations_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.DeliveryGetFreightOperations_CanDelete(ref result);
                return result;
            }
            private static bool __DeliveryGetFreightOperations_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.DeliveryGetFreightOperations_CanRead(ref result);
                return result;
            }
            private static void __DeliveryGetFreightOperations_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryGetFreightOperation e)
            {
                d.DeliveryGetFreightOperations_Inserting(e);
            }
            private static void __DeliveryGetFreightOperations_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryGetFreightOperation e)
            {
                d.DeliveryGetFreightOperations_Inserted(e);
            }
            private static void __DeliveryGetFreightOperations_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryGetFreightOperation e)
            {
                d.DeliveryGetFreightOperations_Updating(e);
            }
            private static void __DeliveryGetFreightOperations_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryGetFreightOperation e)
            {
                d.DeliveryGetFreightOperations_Updated(e);
            }
            private static void __DeliveryGetFreightOperations_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryGetFreightOperation e)
            {
                d.DeliveryGetFreightOperations_Deleting(e);
            }
            private static void __DeliveryGetFreightOperations_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryGetFreightOperation e)
            {
                d.DeliveryGetFreightOperations_Deleted(e);
            }
            private static void __DeliveryGetFreightOperations_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.DeliveryGetFreightOperation e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.DeliveryGetFreightOperations_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.DeliveryGetFreightOperation, bool>> __DeliveryGetFreightOperations_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.DeliveryGetFreightOperation, bool>> filter = null;
                d.DeliveryGetFreightOperations_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>(
                    "SaveChanges",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.ApplicationDataService>
                ___QueryEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.ApplicationDataService>(
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Failed);
            private static void __Query_Executing(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor)
            {
                d.Query_Executing(queryDescriptor);
            }
            private static void __Query_Executed(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor)
            {
                d.Query_Executed(queryDescriptor);
            }
            private static void __Query_Failed(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor)
            {
                d.Query_ExecuteFailed(queryDescriptor);
            }
        }
    
        #endregion
    }
    
    /// <summary>
    /// Stellt Member zum Abfragen und Aktualisieren von Daten in der Datenquelle freibierDB bereit.
    /// </summary>
    public sealed partial class freibierDBService
        : global::LightSwitchApplication.freibierDB
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public freibierDBService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Ruft das Application-Objekt für diese Anwendung ab. Das Application-Objekt stellt Zugriff auf aktive Bildschirme, Methoden zum Öffnen von Bildschirmen sowie Zugriff auf den aktuellen Benutzer bereit.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Ruft den übergeordneten Datenarbeitsbereich ab. Der Datenarbeitsbereich stellt Zugriff auf alle Datenquellen in der Anwendung bereit.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_Inserting(global::LightSwitchApplication.beerRecipientsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_Inserted(global::LightSwitchApplication.beerRecipientsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_Updating(global::LightSwitchApplication.beerRecipientsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_Updated(global::LightSwitchApplication.beerRecipientsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_Deleting(global::LightSwitchApplication.beerRecipientsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_Deleted(global::LightSwitchApplication.beerRecipientsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_Validate(global::LightSwitchApplication.beerRecipientsItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerRecipients_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.beerRecipientsItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_Inserting(global::LightSwitchApplication.beerSuppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_Inserted(global::LightSwitchApplication.beerSuppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_Updating(global::LightSwitchApplication.beerSuppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_Updated(global::LightSwitchApplication.beerSuppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_Deleting(global::LightSwitchApplication.beerSuppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_Deleted(global::LightSwitchApplication.beerSuppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_Validate(global::LightSwitchApplication.beerSuppliersItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliers_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.beerSuppliersItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_Inserting(global::LightSwitchApplication.beerTypesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_Inserted(global::LightSwitchApplication.beerTypesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_Updating(global::LightSwitchApplication.beerTypesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_Updated(global::LightSwitchApplication.beerTypesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_Deleting(global::LightSwitchApplication.beerTypesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_Deleted(global::LightSwitchApplication.beerTypesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_Validate(global::LightSwitchApplication.beerTypesItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerTypes_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.beerTypesItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_Inserting(global::LightSwitchApplication.contactDetailsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_Inserted(global::LightSwitchApplication.contactDetailsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_Updating(global::LightSwitchApplication.contactDetailsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_Updated(global::LightSwitchApplication.contactDetailsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_Deleting(global::LightSwitchApplication.contactDetailsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_Deleted(global::LightSwitchApplication.contactDetailsItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_Validate(global::LightSwitchApplication.contactDetailsItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void contactDetails_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.contactDetailsItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_Inserting(global::LightSwitchApplication.countriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_Inserted(global::LightSwitchApplication.countriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_Updating(global::LightSwitchApplication.countriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_Updated(global::LightSwitchApplication.countriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_Deleting(global::LightSwitchApplication.countriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_Deleted(global::LightSwitchApplication.countriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_Validate(global::LightSwitchApplication.countriesItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void countries_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.countriesItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_Inserting(global::LightSwitchApplication.deliveredBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_Inserted(global::LightSwitchApplication.deliveredBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_Updating(global::LightSwitchApplication.deliveredBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_Updated(global::LightSwitchApplication.deliveredBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_Deleting(global::LightSwitchApplication.deliveredBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_Deleted(global::LightSwitchApplication.deliveredBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_Validate(global::LightSwitchApplication.deliveredBeersItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeers_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.deliveredBeersItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_Inserting(global::LightSwitchApplication.deliveriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_Inserted(global::LightSwitchApplication.deliveriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_Updating(global::LightSwitchApplication.deliveriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_Updated(global::LightSwitchApplication.deliveriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_Deleting(global::LightSwitchApplication.deliveriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_Deleted(global::LightSwitchApplication.deliveriesItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_Validate(global::LightSwitchApplication.deliveriesItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveries_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.deliveriesItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_Inserting(global::LightSwitchApplication.driversItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_Inserted(global::LightSwitchApplication.driversItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_Updating(global::LightSwitchApplication.driversItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_Updated(global::LightSwitchApplication.driversItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_Deleting(global::LightSwitchApplication.driversItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_Deleted(global::LightSwitchApplication.driversItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_Validate(global::LightSwitchApplication.driversItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void drivers_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.driversItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_Inserting(global::LightSwitchApplication.orderedBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_Inserted(global::LightSwitchApplication.orderedBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_Updating(global::LightSwitchApplication.orderedBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_Updated(global::LightSwitchApplication.orderedBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_Deleting(global::LightSwitchApplication.orderedBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_Deleted(global::LightSwitchApplication.orderedBeersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_Validate(global::LightSwitchApplication.orderedBeersItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeers_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.orderedBeersItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_Inserting(global::LightSwitchApplication.ordersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_Inserted(global::LightSwitchApplication.ordersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_Updating(global::LightSwitchApplication.ordersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_Updated(global::LightSwitchApplication.ordersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_Deleting(global::LightSwitchApplication.ordersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_Deleted(global::LightSwitchApplication.ordersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_Validate(global::LightSwitchApplication.ordersItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orders_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.ordersItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_Inserting(global::LightSwitchApplication.storageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_Inserted(global::LightSwitchApplication.storageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_Updating(global::LightSwitchApplication.storageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_Updated(global::LightSwitchApplication.storageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_Deleting(global::LightSwitchApplication.storageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_Deleted(global::LightSwitchApplication.storageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_Validate(global::LightSwitchApplication.storageItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void storage_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.storageItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_Inserting(global::LightSwitchApplication.suppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_Inserted(global::LightSwitchApplication.suppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_Updating(global::LightSwitchApplication.suppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_Updated(global::LightSwitchApplication.suppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_Deleting(global::LightSwitchApplication.suppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_Deleted(global::LightSwitchApplication.suppliersItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_Validate(global::LightSwitchApplication.suppliersItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void suppliers_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.suppliersItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_Inserting(global::LightSwitchApplication.supplierStorageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_Inserted(global::LightSwitchApplication.supplierStorageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_Updating(global::LightSwitchApplication.supplierStorageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_Updated(global::LightSwitchApplication.supplierStorageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_Deleting(global::LightSwitchApplication.supplierStorageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_Deleted(global::LightSwitchApplication.supplierStorageItem entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_Validate(global::LightSwitchApplication.supplierStorageItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void supplierStorage_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.supplierStorageItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void view_driver_nextDeliveries_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void view_driver_nextDeliveries_Validate(global::LightSwitchApplication.view_driver_nextDeliveriesItem entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void view_driver_nextDeliveries_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.view_driver_nextDeliveriesItem, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeeryByOrder_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void orderedBeeryByOrder_Executing(global::System.Nullable<int> orderId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void orderedBeeryByOrder_PreprocessQuery(global::System.Nullable<int> orderId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.orderedBeersItem> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void orderedBeeryByOrder_Executed(global::System.Nullable<int> orderId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.orderedBeersItem> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void orderedBeeryByOrder_ExecuteFailed(global::System.Nullable<int> orderId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliersBySupplier_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void beerSuppliersBySupplier_Executing(global::System.Nullable<int> supplierId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void beerSuppliersBySupplier_PreprocessQuery(global::System.Nullable<int> supplierId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.beerSuppliersItem> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void beerSuppliersBySupplier_Executed(global::System.Nullable<int> supplierId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.beerSuppliersItem> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void beerSuppliersBySupplier_ExecuteFailed(global::System.Nullable<int> supplierId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeersByDelivery_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void deliveredBeersByDelivery_Executing(global::System.Nullable<int> deliveryId);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void deliveredBeersByDelivery_PreprocessQuery(global::System.Nullable<int> deliveryId, ref global::System.Linq.IQueryable<global::LightSwitchApplication.deliveredBeersItem> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void deliveredBeersByDelivery_Executed(global::System.Nullable<int> deliveryId, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.deliveredBeersItem> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void deliveredBeersByDelivery_ExecuteFailed(global::System.Nullable<int> deliveryId, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executing(global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executed(global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_ExecuteFailed(global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.beerRecipientsItem>
                __beerRecipientsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.beerRecipientsItem>(
                    "beerRecipients",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerRecipients_Filter);
            private static bool __beerRecipients_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerRecipients_CanInsert(ref result);
                return result;
            }
            private static bool __beerRecipients_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerRecipients_CanUpdate(ref result);
                return result;
            }
            private static bool __beerRecipients_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerRecipients_CanDelete(ref result);
                return result;
            }
            private static bool __beerRecipients_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerRecipients_CanRead(ref result);
                return result;
            }
            private static void __beerRecipients_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerRecipientsItem e)
            {
                d.beerRecipients_Inserting(e);
            }
            private static void __beerRecipients_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerRecipientsItem e)
            {
                d.beerRecipients_Inserted(e);
            }
            private static void __beerRecipients_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerRecipientsItem e)
            {
                d.beerRecipients_Updating(e);
            }
            private static void __beerRecipients_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerRecipientsItem e)
            {
                d.beerRecipients_Updated(e);
            }
            private static void __beerRecipients_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerRecipientsItem e)
            {
                d.beerRecipients_Deleting(e);
            }
            private static void __beerRecipients_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerRecipientsItem e)
            {
                d.beerRecipients_Deleted(e);
            }
            private static void __beerRecipients_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerRecipientsItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.beerRecipients_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.beerRecipientsItem, bool>> __beerRecipients_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.beerRecipientsItem, bool>> filter = null;
                d.beerRecipients_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.beerSuppliersItem>
                __beerSuppliersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.beerSuppliersItem>(
                    "beerSuppliers",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliers_Filter);
            private static bool __beerSuppliers_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerSuppliers_CanInsert(ref result);
                return result;
            }
            private static bool __beerSuppliers_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerSuppliers_CanUpdate(ref result);
                return result;
            }
            private static bool __beerSuppliers_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerSuppliers_CanDelete(ref result);
                return result;
            }
            private static bool __beerSuppliers_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerSuppliers_CanRead(ref result);
                return result;
            }
            private static void __beerSuppliers_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerSuppliersItem e)
            {
                d.beerSuppliers_Inserting(e);
            }
            private static void __beerSuppliers_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerSuppliersItem e)
            {
                d.beerSuppliers_Inserted(e);
            }
            private static void __beerSuppliers_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerSuppliersItem e)
            {
                d.beerSuppliers_Updating(e);
            }
            private static void __beerSuppliers_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerSuppliersItem e)
            {
                d.beerSuppliers_Updated(e);
            }
            private static void __beerSuppliers_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerSuppliersItem e)
            {
                d.beerSuppliers_Deleting(e);
            }
            private static void __beerSuppliers_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerSuppliersItem e)
            {
                d.beerSuppliers_Deleted(e);
            }
            private static void __beerSuppliers_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerSuppliersItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.beerSuppliers_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.beerSuppliersItem, bool>> __beerSuppliers_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.beerSuppliersItem, bool>> filter = null;
                d.beerSuppliers_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.beerTypesItem>
                __beerTypesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.beerTypesItem>(
                    "beerTypes",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerTypes_Filter);
            private static bool __beerTypes_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerTypes_CanInsert(ref result);
                return result;
            }
            private static bool __beerTypes_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerTypes_CanUpdate(ref result);
                return result;
            }
            private static bool __beerTypes_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerTypes_CanDelete(ref result);
                return result;
            }
            private static bool __beerTypes_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.beerTypes_CanRead(ref result);
                return result;
            }
            private static void __beerTypes_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerTypesItem e)
            {
                d.beerTypes_Inserting(e);
            }
            private static void __beerTypes_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerTypesItem e)
            {
                d.beerTypes_Inserted(e);
            }
            private static void __beerTypes_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerTypesItem e)
            {
                d.beerTypes_Updating(e);
            }
            private static void __beerTypes_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerTypesItem e)
            {
                d.beerTypes_Updated(e);
            }
            private static void __beerTypes_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerTypesItem e)
            {
                d.beerTypes_Deleting(e);
            }
            private static void __beerTypes_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerTypesItem e)
            {
                d.beerTypes_Deleted(e);
            }
            private static void __beerTypes_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.beerTypesItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.beerTypes_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.beerTypesItem, bool>> __beerTypes_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.beerTypesItem, bool>> filter = null;
                d.beerTypes_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.contactDetailsItem>
                __contactDetailsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.contactDetailsItem>(
                    "contactDetails",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__contactDetails_Filter);
            private static bool __contactDetails_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.contactDetails_CanInsert(ref result);
                return result;
            }
            private static bool __contactDetails_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.contactDetails_CanUpdate(ref result);
                return result;
            }
            private static bool __contactDetails_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.contactDetails_CanDelete(ref result);
                return result;
            }
            private static bool __contactDetails_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.contactDetails_CanRead(ref result);
                return result;
            }
            private static void __contactDetails_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.contactDetailsItem e)
            {
                d.contactDetails_Inserting(e);
            }
            private static void __contactDetails_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.contactDetailsItem e)
            {
                d.contactDetails_Inserted(e);
            }
            private static void __contactDetails_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.contactDetailsItem e)
            {
                d.contactDetails_Updating(e);
            }
            private static void __contactDetails_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.contactDetailsItem e)
            {
                d.contactDetails_Updated(e);
            }
            private static void __contactDetails_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.contactDetailsItem e)
            {
                d.contactDetails_Deleting(e);
            }
            private static void __contactDetails_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.contactDetailsItem e)
            {
                d.contactDetails_Deleted(e);
            }
            private static void __contactDetails_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.contactDetailsItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.contactDetails_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.contactDetailsItem, bool>> __contactDetails_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.contactDetailsItem, bool>> filter = null;
                d.contactDetails_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.countriesItem>
                __countriesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.countriesItem>(
                    "countries",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__countries_Filter);
            private static bool __countries_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.countries_CanInsert(ref result);
                return result;
            }
            private static bool __countries_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.countries_CanUpdate(ref result);
                return result;
            }
            private static bool __countries_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.countries_CanDelete(ref result);
                return result;
            }
            private static bool __countries_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.countries_CanRead(ref result);
                return result;
            }
            private static void __countries_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.countriesItem e)
            {
                d.countries_Inserting(e);
            }
            private static void __countries_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.countriesItem e)
            {
                d.countries_Inserted(e);
            }
            private static void __countries_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.countriesItem e)
            {
                d.countries_Updating(e);
            }
            private static void __countries_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.countriesItem e)
            {
                d.countries_Updated(e);
            }
            private static void __countries_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.countriesItem e)
            {
                d.countries_Deleting(e);
            }
            private static void __countries_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.countriesItem e)
            {
                d.countries_Deleted(e);
            }
            private static void __countries_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.countriesItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.countries_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.countriesItem, bool>> __countries_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.countriesItem, bool>> filter = null;
                d.countries_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.deliveredBeersItem>
                __deliveredBeersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.deliveredBeersItem>(
                    "deliveredBeers",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeers_Filter);
            private static bool __deliveredBeers_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.deliveredBeers_CanInsert(ref result);
                return result;
            }
            private static bool __deliveredBeers_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.deliveredBeers_CanUpdate(ref result);
                return result;
            }
            private static bool __deliveredBeers_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.deliveredBeers_CanDelete(ref result);
                return result;
            }
            private static bool __deliveredBeers_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.deliveredBeers_CanRead(ref result);
                return result;
            }
            private static void __deliveredBeers_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveredBeersItem e)
            {
                d.deliveredBeers_Inserting(e);
            }
            private static void __deliveredBeers_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveredBeersItem e)
            {
                d.deliveredBeers_Inserted(e);
            }
            private static void __deliveredBeers_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveredBeersItem e)
            {
                d.deliveredBeers_Updating(e);
            }
            private static void __deliveredBeers_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveredBeersItem e)
            {
                d.deliveredBeers_Updated(e);
            }
            private static void __deliveredBeers_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveredBeersItem e)
            {
                d.deliveredBeers_Deleting(e);
            }
            private static void __deliveredBeers_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveredBeersItem e)
            {
                d.deliveredBeers_Deleted(e);
            }
            private static void __deliveredBeers_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveredBeersItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.deliveredBeers_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.deliveredBeersItem, bool>> __deliveredBeers_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.deliveredBeersItem, bool>> filter = null;
                d.deliveredBeers_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.deliveriesItem>
                __deliveriesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.deliveriesItem>(
                    "deliveries",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveries_Filter);
            private static bool __deliveries_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.deliveries_CanInsert(ref result);
                return result;
            }
            private static bool __deliveries_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.deliveries_CanUpdate(ref result);
                return result;
            }
            private static bool __deliveries_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.deliveries_CanDelete(ref result);
                return result;
            }
            private static bool __deliveries_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.deliveries_CanRead(ref result);
                return result;
            }
            private static void __deliveries_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveriesItem e)
            {
                d.deliveries_Inserting(e);
            }
            private static void __deliveries_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveriesItem e)
            {
                d.deliveries_Inserted(e);
            }
            private static void __deliveries_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveriesItem e)
            {
                d.deliveries_Updating(e);
            }
            private static void __deliveries_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveriesItem e)
            {
                d.deliveries_Updated(e);
            }
            private static void __deliveries_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveriesItem e)
            {
                d.deliveries_Deleting(e);
            }
            private static void __deliveries_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveriesItem e)
            {
                d.deliveries_Deleted(e);
            }
            private static void __deliveries_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.deliveriesItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.deliveries_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.deliveriesItem, bool>> __deliveries_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.deliveriesItem, bool>> filter = null;
                d.deliveries_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.driversItem>
                __driversEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.driversItem>(
                    "drivers",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__drivers_Filter);
            private static bool __drivers_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.drivers_CanInsert(ref result);
                return result;
            }
            private static bool __drivers_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.drivers_CanUpdate(ref result);
                return result;
            }
            private static bool __drivers_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.drivers_CanDelete(ref result);
                return result;
            }
            private static bool __drivers_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.drivers_CanRead(ref result);
                return result;
            }
            private static void __drivers_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.driversItem e)
            {
                d.drivers_Inserting(e);
            }
            private static void __drivers_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.driversItem e)
            {
                d.drivers_Inserted(e);
            }
            private static void __drivers_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.driversItem e)
            {
                d.drivers_Updating(e);
            }
            private static void __drivers_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.driversItem e)
            {
                d.drivers_Updated(e);
            }
            private static void __drivers_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.driversItem e)
            {
                d.drivers_Deleting(e);
            }
            private static void __drivers_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.driversItem e)
            {
                d.drivers_Deleted(e);
            }
            private static void __drivers_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.driversItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.drivers_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.driversItem, bool>> __drivers_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.driversItem, bool>> filter = null;
                d.drivers_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.orderedBeersItem>
                __orderedBeersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.orderedBeersItem>(
                    "orderedBeers",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeers_Filter);
            private static bool __orderedBeers_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.orderedBeers_CanInsert(ref result);
                return result;
            }
            private static bool __orderedBeers_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.orderedBeers_CanUpdate(ref result);
                return result;
            }
            private static bool __orderedBeers_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.orderedBeers_CanDelete(ref result);
                return result;
            }
            private static bool __orderedBeers_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.orderedBeers_CanRead(ref result);
                return result;
            }
            private static void __orderedBeers_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.orderedBeersItem e)
            {
                d.orderedBeers_Inserting(e);
            }
            private static void __orderedBeers_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.orderedBeersItem e)
            {
                d.orderedBeers_Inserted(e);
            }
            private static void __orderedBeers_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.orderedBeersItem e)
            {
                d.orderedBeers_Updating(e);
            }
            private static void __orderedBeers_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.orderedBeersItem e)
            {
                d.orderedBeers_Updated(e);
            }
            private static void __orderedBeers_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.orderedBeersItem e)
            {
                d.orderedBeers_Deleting(e);
            }
            private static void __orderedBeers_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.orderedBeersItem e)
            {
                d.orderedBeers_Deleted(e);
            }
            private static void __orderedBeers_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.orderedBeersItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.orderedBeers_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.orderedBeersItem, bool>> __orderedBeers_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.orderedBeersItem, bool>> filter = null;
                d.orderedBeers_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.ordersItem>
                __ordersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.ordersItem>(
                    "orders",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orders_Filter);
            private static bool __orders_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.orders_CanInsert(ref result);
                return result;
            }
            private static bool __orders_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.orders_CanUpdate(ref result);
                return result;
            }
            private static bool __orders_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.orders_CanDelete(ref result);
                return result;
            }
            private static bool __orders_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.orders_CanRead(ref result);
                return result;
            }
            private static void __orders_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.ordersItem e)
            {
                d.orders_Inserting(e);
            }
            private static void __orders_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.ordersItem e)
            {
                d.orders_Inserted(e);
            }
            private static void __orders_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.ordersItem e)
            {
                d.orders_Updating(e);
            }
            private static void __orders_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.ordersItem e)
            {
                d.orders_Updated(e);
            }
            private static void __orders_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.ordersItem e)
            {
                d.orders_Deleting(e);
            }
            private static void __orders_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.ordersItem e)
            {
                d.orders_Deleted(e);
            }
            private static void __orders_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.ordersItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.orders_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.ordersItem, bool>> __orders_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.ordersItem, bool>> filter = null;
                d.orders_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.storageItem>
                __storageEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.storageItem>(
                    "storage",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__storage_Filter);
            private static bool __storage_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.storage_CanInsert(ref result);
                return result;
            }
            private static bool __storage_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.storage_CanUpdate(ref result);
                return result;
            }
            private static bool __storage_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.storage_CanDelete(ref result);
                return result;
            }
            private static bool __storage_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.storage_CanRead(ref result);
                return result;
            }
            private static void __storage_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.storageItem e)
            {
                d.storage_Inserting(e);
            }
            private static void __storage_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.storageItem e)
            {
                d.storage_Inserted(e);
            }
            private static void __storage_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.storageItem e)
            {
                d.storage_Updating(e);
            }
            private static void __storage_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.storageItem e)
            {
                d.storage_Updated(e);
            }
            private static void __storage_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.storageItem e)
            {
                d.storage_Deleting(e);
            }
            private static void __storage_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.storageItem e)
            {
                d.storage_Deleted(e);
            }
            private static void __storage_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.storageItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.storage_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.storageItem, bool>> __storage_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.storageItem, bool>> filter = null;
                d.storage_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.suppliersItem>
                __suppliersEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.suppliersItem>(
                    "suppliers",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__suppliers_Filter);
            private static bool __suppliers_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.suppliers_CanInsert(ref result);
                return result;
            }
            private static bool __suppliers_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.suppliers_CanUpdate(ref result);
                return result;
            }
            private static bool __suppliers_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.suppliers_CanDelete(ref result);
                return result;
            }
            private static bool __suppliers_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.suppliers_CanRead(ref result);
                return result;
            }
            private static void __suppliers_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.suppliersItem e)
            {
                d.suppliers_Inserting(e);
            }
            private static void __suppliers_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.suppliersItem e)
            {
                d.suppliers_Inserted(e);
            }
            private static void __suppliers_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.suppliersItem e)
            {
                d.suppliers_Updating(e);
            }
            private static void __suppliers_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.suppliersItem e)
            {
                d.suppliers_Updated(e);
            }
            private static void __suppliers_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.suppliersItem e)
            {
                d.suppliers_Deleting(e);
            }
            private static void __suppliers_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.suppliersItem e)
            {
                d.suppliers_Deleted(e);
            }
            private static void __suppliers_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.suppliersItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.suppliers_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.suppliersItem, bool>> __suppliers_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.suppliersItem, bool>> filter = null;
                d.suppliers_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.supplierStorageItem>
                __supplierStorageEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.supplierStorageItem>(
                    "supplierStorage",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_CanInsert,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_CanUpdate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_CanDelete,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_CanRead,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_Inserting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_Inserted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_Updating,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_Updated,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_Deleting,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_Deleted,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__supplierStorage_Filter);
            private static bool __supplierStorage_CanInsert(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.supplierStorage_CanInsert(ref result);
                return result;
            }
            private static bool __supplierStorage_CanUpdate(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.supplierStorage_CanUpdate(ref result);
                return result;
            }
            private static bool __supplierStorage_CanDelete(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.supplierStorage_CanDelete(ref result);
                return result;
            }
            private static bool __supplierStorage_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.supplierStorage_CanRead(ref result);
                return result;
            }
            private static void __supplierStorage_Inserting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.supplierStorageItem e)
            {
                d.supplierStorage_Inserting(e);
            }
            private static void __supplierStorage_Inserted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.supplierStorageItem e)
            {
                d.supplierStorage_Inserted(e);
            }
            private static void __supplierStorage_Updating(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.supplierStorageItem e)
            {
                d.supplierStorage_Updating(e);
            }
            private static void __supplierStorage_Updated(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.supplierStorageItem e)
            {
                d.supplierStorage_Updated(e);
            }
            private static void __supplierStorage_Deleting(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.supplierStorageItem e)
            {
                d.supplierStorage_Deleting(e);
            }
            private static void __supplierStorage_Deleted(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.supplierStorageItem e)
            {
                d.supplierStorage_Deleted(e);
            }
            private static void __supplierStorage_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.supplierStorageItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.supplierStorage_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.supplierStorageItem, bool>> __supplierStorage_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.supplierStorageItem, bool>> filter = null;
                d.supplierStorage_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.view_driver_nextDeliveriesItem>
                __view_driver_nextDeliveriesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.view_driver_nextDeliveriesItem>(
                    "view_driver_nextDeliveries",
                    null,
                    null,
                    null,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__view_driver_nextDeliveries_CanRead,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__view_driver_nextDeliveries_Validate,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__view_driver_nextDeliveries_Filter);
            private static bool __view_driver_nextDeliveries_CanRead(global::LightSwitchApplication.freibierDBService d)
            {
                bool result = true;
                d.view_driver_nextDeliveries_CanRead(ref result);
                return result;
            }
            private static void __view_driver_nextDeliveries_Validate(global::LightSwitchApplication.freibierDBService d, global::LightSwitchApplication.view_driver_nextDeliveriesItem e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.view_driver_nextDeliveries_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.view_driver_nextDeliveriesItem, bool>> __view_driver_nextDeliveries_Filter(global::LightSwitchApplication.freibierDBService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.view_driver_nextDeliveriesItem, bool>> filter = null;
                d.view_driver_nextDeliveries_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.freibierDBService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.freibierDBService>(
                    "SaveChanges",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.freibierDBService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.freibierDBService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.orderedBeersItem>
                __orderedBeeryByOrderEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.orderedBeersItem>(
                    "orderedBeeryByOrder",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeeryByOrder_CanExecute,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeeryByOrder_Executing,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeeryByOrder_Executed,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeeryByOrder_Failed,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__orderedBeeryByOrder_PreprocessQuery);
            private static bool __orderedBeeryByOrder_CanExecute(global::LightSwitchApplication.freibierDBService d, bool r)
            {
                d.orderedBeeryByOrder_CanExecute(ref r);
                return r;
            }
            private static void __orderedBeeryByOrder_Executing(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                d.orderedBeeryByOrder_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __orderedBeeryByOrder_Executed(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                d.orderedBeeryByOrder_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.orderedBeersItem>)args[1]);
            }
            private static void __orderedBeeryByOrder_Failed(global::LightSwitchApplication.freibierDBService d, object[] args, global::System.Exception ex)
            {
                d.orderedBeeryByOrder_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __orderedBeeryByOrder_PreprocessQuery(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.orderedBeersItem> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.orderedBeersItem>)args[1];
                d.orderedBeeryByOrder_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.beerSuppliersItem>
                __beerSuppliersBySupplierEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.beerSuppliersItem>(
                    "beerSuppliersBySupplier",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliersBySupplier_CanExecute,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliersBySupplier_Executing,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliersBySupplier_Executed,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliersBySupplier_Failed,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__beerSuppliersBySupplier_PreprocessQuery);
            private static bool __beerSuppliersBySupplier_CanExecute(global::LightSwitchApplication.freibierDBService d, bool r)
            {
                d.beerSuppliersBySupplier_CanExecute(ref r);
                return r;
            }
            private static void __beerSuppliersBySupplier_Executing(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                d.beerSuppliersBySupplier_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __beerSuppliersBySupplier_Executed(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                d.beerSuppliersBySupplier_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.beerSuppliersItem>)args[1]);
            }
            private static void __beerSuppliersBySupplier_Failed(global::LightSwitchApplication.freibierDBService d, object[] args, global::System.Exception ex)
            {
                d.beerSuppliersBySupplier_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __beerSuppliersBySupplier_PreprocessQuery(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.beerSuppliersItem> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.beerSuppliersItem>)args[1];
                d.beerSuppliersBySupplier_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.deliveredBeersItem>
                __deliveredBeersByDeliveryEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.freibierDBService, global::LightSwitchApplication.deliveredBeersItem>(
                    "deliveredBeersByDelivery",
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeersByDelivery_CanExecute,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeersByDelivery_Executing,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeersByDelivery_Executed,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeersByDelivery_Failed,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__deliveredBeersByDelivery_PreprocessQuery);
            private static bool __deliveredBeersByDelivery_CanExecute(global::LightSwitchApplication.freibierDBService d, bool r)
            {
                d.deliveredBeersByDelivery_CanExecute(ref r);
                return r;
            }
            private static void __deliveredBeersByDelivery_Executing(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                d.deliveredBeersByDelivery_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __deliveredBeersByDelivery_Executed(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                d.deliveredBeersByDelivery_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.deliveredBeersItem>)args[1]);
            }
            private static void __deliveredBeersByDelivery_Failed(global::LightSwitchApplication.freibierDBService d, object[] args, global::System.Exception ex)
            {
                d.deliveredBeersByDelivery_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __deliveredBeersByDelivery_PreprocessQuery(global::LightSwitchApplication.freibierDBService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.deliveredBeersItem> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.deliveredBeersItem>)args[1];
                d.deliveredBeersByDelivery_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.freibierDBService>
                ___QueryEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.freibierDBService>(
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__Query_Executing,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__Query_Executed,
                    global::LightSwitchApplication.freibierDBService.DetailsClass.__Query_Failed);
            private static void __Query_Executing(global::LightSwitchApplication.freibierDBService d, global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor)
            {
                d.Query_Executing(queryDescriptor);
            }
            private static void __Query_Executed(global::LightSwitchApplication.freibierDBService d, global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor)
            {
                d.Query_Executed(queryDescriptor);
            }
            private static void __Query_Failed(global::LightSwitchApplication.freibierDBService d, global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor)
            {
                d.Query_ExecuteFailed(queryDescriptor);
            }
        }
    
        #endregion
    }
    
    #endregion
}
